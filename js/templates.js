// Generated by CoffeeScript 1.6.3
var templates;

templates = [
  {
    name: 'simple_line',
    html: '<!-- SIMPLE_LINE -->\n<div id="{{ chart_id }}">\n  <script src="http://d3js.org/d3.v3.min.js"></script>\n  <script src="http://dimplejs.org/dist/dimple.v1.1.2.min.js"></script>\n  <script>\n    (function(){\n      var svg = dimple.newSvg("#{{ chart_id }}", "100%", "390px");\n      var myChart = new dimple.chart(svg, {{ chart_data }});\n      myChart.setMargins("60px", "60px", "40px", "40px");\n\n      myChart.addCategoryAxis("x", "{{ x_axis_key }}");\n      myChart.addMeasureAxis("y", "{{ y_axis_key }}");\n\n      myChart.addSeries("series", dimple.plot.line);\n      myChart.addLegend(20, 20, 1000, 10, "left");\n      //timeout to make sure it picks up the right dimensions\n      setTimeout(function(){ myChart.draw() }, 10);\n    \n      window.onresize = function () {\n        myChart.draw(0, true);\n      };\n    })();\n  </script>\n</div>',
    data: [['Year', 'Maserati', 'Mazda', 'Mercedes', 'Mini', 'Mitsubishi'], ['2009', '0', '2941', '4303', '354', '5814'], ['2010', '5', '2905', '2867', '412', '5284'], ['2011', '4', '2517', '4822', '552', '6127'], ['2012', '2', '2422', '5399', '776', '4151'], [null, null, null, null, null, null]],
    y_axis_key: 'Thousands Sold'
  }, {
    name: 'simple_bar',
    html: '<!-- SIMPLE_BAR -->\n<div id="{{ chart_id }}">\n  <script src="http://d3js.org/d3.v3.min.js"></script>\n  <script src="http://dimplejs.org/dist/dimple.v1.1.2.min.js"></script>\n  <script>\n    (function(){\n      var svg = dimple.newSvg("#{{ chart_id }}", "100%", "390px");\n      var myChart = new dimple.chart(svg, {{ chart_data }});\n      myChart.setMargins("60px", "60px", "40px", "40px");\n\n      myChart.addCategoryAxis("x", "{{ x_axis_key }}");\n      myChart.addMeasureAxis("y", "{{ y_axis_key }}");\n\n      myChart.addSeries("series", dimple.plot.bar);\n      myChart.addLegend(20, 20, 1000, 10, "left");\n      //timeout to make sure it picks up the right dimensions\n      setTimeout(function(){ myChart.draw() }, 10);\n    \n      window.onresize = function () {\n        myChart.draw(0, true);\n      };\n    })();\n  </script>\n</div>',
    data: [['Year', 'Maserati', 'Mazda', 'Mercedes', 'Mini', 'Mitsubishi'], ['2009', '0', '2941', '4303', '354', '5814'], ['2010', '5', '2905', '2867', '412', '5284'], ['2011', '4', '2517', '4822', '552', '6127'], ['2012', '2', '2422', '5399', '776', '4151'], [null, null, null, null, null, null]],
    y_axis_key: 'Thousands Sold'
  }, {
    name: 'simple_area',
    html: '<!-- SIMPLE_AREA -->\n<div id="{{ chart_id }}">\n  <script src="http://d3js.org/d3.v3.min.js"></script>\n  <script src="http://dimplejs.org/dist/dimple.v1.1.2.min.js"></script>\n  <script>\n    (function(){\n      var svg = dimple.newSvg("#{{ chart_id }}", "100%", "390px");\n      var myChart = new dimple.chart(svg, {{ chart_data }});\n      myChart.setMargins("60px", "60px", "40px", "40px");\n\n      myChart.addCategoryAxis("x", "{{ x_axis_key }}");\n      myChart.addMeasureAxis("y", "{{ y_axis_key }}");\n\n      myChart.addSeries("series", dimple.plot.area);\n      myChart.addLegend(20, 20, 1000, 10, "left");\n      //timeout to make sure it picks up the right dimensions\n      setTimeout(function(){ myChart.draw() }, 10);\n    \n      window.onresize = function () {\n        myChart.draw(0, true);\n      };\n    })();\n  </script>\n</div>',
    data: [['Year', 'Maserati', 'Mazda', 'Mercedes', 'Mini', 'Mitsubishi'], ['2009', '0', '2941', '4303', '354', '5814'], ['2010', '5', '2905', '2867', '412', '5284'], ['2011', '4', '2517', '4822', '552', '6127'], ['2012', '2', '2422', '5399', '776', '4151'], [null, null, null, null, null, null]],
    y_axis_key: 'Thousands Sold'
  }, {
    name: 'multi_donut',
    html: '<!-- MULTI_DONUT -->\n<div id="{{ chart_id }}">\n  <style>\n    .svg-{{ chart_id }} {\n      float: left !important;\n    }\n  </style>\n  <script src="http://d3js.org/d3.v3.min.js"></script>\n  <script src="http://dimplejs.org/dist/dimple.v1.1.2.min.js"></script>\n  <script>\n    (function(){\n      var width = 380,\n          height = width,\n          radius = width / 2.6,\n          data = {{ chart_data }};\n\n      var nested = d3.nest()\n        .key(function(d) { return d["{{ x_axis_key }}"]; })\n        .entries(data);\n\n      var color = d3.scale.category20c();\n\n      var pie = d3.layout.pie()\n          .value(function(d) { return d["{{ y_axis_key }}"]; })\n          .sort(null);\n\n      var arc = d3.svg.arc()\n          .innerRadius(radius / 2.5)\n          .outerRadius(radius / 1.3);\n\n      // Make pie chart svg\n      var svg = d3.select("#{{ chart_id }}").append("svg")\n          .attr("width", width)\n          .attr("height", height)\n          .attr("class", "svg-{{ chart_id }}" )\n        .append("g")\n          .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");\n\n      // Make group to hold slice path and label\n      var slice_group = svg.datum(nested[0].values).selectAll("path")\n        .data(pie)\n        .enter()\n          .append("g");\n\n      // This is the actual slice path\n      var slice_path = slice_group.append("path")\n        .attr("fill", function(d, i) { return color(i); })\n        .attr("d", arc)\n        .each(function(d) { this._current = d; }); // store the initial angles\n\n      // Make group to hold labels\n      var label_group = slice_group.append("g")\n        .attr("transform", labelPos);\n\n      var line_1 = label_group.append("text") // First line\n        .text(function(d) { return d.data.series; })\n        .attr("text-anchor", "middle");\n\n      var line_2 = label_group.append("text") // Second line\n        .text(function(d) { return d.data["{{ y_axis_key }}"]; })\n        .attr("dy", "1em")\n        .attr("text-anchor", "middle");\n\n      // Make dataset selector\n      var selector = d3.select("#{{ chart_id }}").append("form").selectAll("label")\n        .data(nested)\n        .enter()\n          .append("label")\n          .html(function (d, i) {\n            var checked = (i === 0) ? "checked" : "";\n            return "<input type=\'radio\' name=\'dataset\' value=\'" + i + "\'" + checked + ">" + d.key;\n          });\n\n      // Switch data\n      selector.selectAll("input")\n        .on("change", change);\n\n      function change() {\n        console.log(nested, this)\n        var value = this.value;\n        svg.datum(nested[value].values);\n\n        slice_path.data(pie) // compute the new angles\n          .transition().duration(750).attrTween("d", arcTween); // redraw the arcs\n\n        label_group.data(pie)\n          .transition().duration(750)\n          .attr("transform", labelPos);\n\n        line_1.data(pie)\n          .text(function(d) { return d.data["series"]; });\n\n        line_2.data(pie)\n          .text(function(d) { return d.data["{{ y_axis_key }}"]; });\n      }\n\n      function labelPos (d) {\n        var c = arc.centroid(d);\n        return "translate(" + c[0] * 1.8 +"," + c[1] * 1.6 + ")";\n      }\n\n      // Store the displayed angles in _current.\n      // Then, interpolate from _current to the new angles.\n      // During the transition, _current is updated in-place by d3.interpolate.\n      function arcTween (a) {\n        var i = d3.interpolate(this._current, a);\n        this._current = i(0);\n        return function(t) {\n          return arc(i(t));\n        };\n      }\n\n    })();\n  </script>\n</div>',
    data: [['Year', 'Maserati', 'Mazda', 'Mercedes', 'Mini', 'Mitsubishi'], ['2009', '0', '2941', '4303', '354', '5814'], ['2010', '5', '2905', '2867', '412', '5284'], ['2011', '4', '2517', '4822', '552', '6127'], ['2012', '2', '2422', '5399', '776', '4151'], [null, null, null, null, null, null]],
    y_axis_key: 'Thousands Sold'
  }
];
