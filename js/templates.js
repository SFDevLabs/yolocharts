// Generated by CoffeeScript 1.6.3
var templates;

templates = [
  {
    name: 'simple_line',
    html: '<!-- SIMPLE_LINE -->\n<div id="{{ chart_id }}">\n  <script src="http://d3js.org/d3.v3.min.js"></script>\n  <script src="http://dimplejs.org/dist/dimple.v1.1.2.min.js"></script>\n  <script>\n    (function(){\n      var svg = dimple.newSvg("#{{ chart_id }}", "100%", "390px");\n      var myChart = new dimple.chart(svg, {{ chart_data }});\n      myChart.setMargins("60px", "60px", "40px", "40px");\n\n      myChart.addCategoryAxis("x", "{{ x_axis_key }}");\n      myChart.addMeasureAxis("y", "{{ y_axis_key }}");\n\n      myChart.addSeries("series", dimple.plot.line);\n      myChart.addLegend(20, 20, 1000, 10, "left");\n      //timeout to make sure it picks up the right dimensions\n      setTimeout(function(){ myChart.draw() }, 10);\n    \n      window.onresize = function () {\n        myChart.draw(0, true);\n      };\n    })();\n  </script>\n</div>',
    data: [['Year', 'Maserati', 'Mazda', 'Mercedes', 'Mini', 'Mitsubishi'], ['2009', '0', '2941', '4303', '354', '5814'], ['2010', '5', '2905', '2867', '412', '5284'], ['2011', '4', '2517', '4822', '552', '6127'], ['2012', '2', '2422', '5399', '776', '4151'], [null, null, null, null, null, null]],
    y_axis_key: 'Thousands Sold'
  }, {
    name: 'simple_bar',
    html: '<!-- SIMPLE_BAR -->\n<div id="{{ chart_id }}">\n  <script src="http://d3js.org/d3.v3.min.js"></script>\n  <script src="http://dimplejs.org/dist/dimple.v1.1.2.min.js"></script>\n  <script>\n    (function(){\n      var svg = dimple.newSvg("#{{ chart_id }}", "100%", "390px");\n      var myChart = new dimple.chart(svg, {{ chart_data }});\n      myChart.setMargins("60px", "60px", "40px", "40px");\n\n      myChart.addCategoryAxis("x", "{{ x_axis_key }}");\n      myChart.addMeasureAxis("y", "{{ y_axis_key }}");\n\n      myChart.addSeries("series", dimple.plot.bar);\n      myChart.addLegend(20, 20, 1000, 10, "left");\n      //timeout to make sure it picks up the right dimensions\n      setTimeout(function(){ myChart.draw() }, 10);\n    \n      window.onresize = function () {\n        myChart.draw(0, true);\n      };\n    })();\n  </script>\n</div>',
    data: [['Year', 'Maserati', 'Mazda', 'Mercedes', 'Mini', 'Mitsubishi'], ['2009', '0', '2941', '4303', '354', '5814'], ['2010', '5', '2905', '2867', '412', '5284'], ['2011', '4', '2517', '4822', '552', '6127'], ['2012', '2', '2422', '5399', '776', '4151'], [null, null, null, null, null, null]],
    y_axis_key: 'Thousands Sold'
  }, {
    name: 'simple_area',
    html: '<!-- SIMPLE_AREA -->\n<div id="{{ chart_id }}">\n  <script src="http://d3js.org/d3.v3.min.js"></script>\n  <script src="http://dimplejs.org/dist/dimple.v1.1.2.min.js"></script>\n  <script>\n    (function(){\n      var svg = dimple.newSvg("#{{ chart_id }}", "100%", "390px");\n      var myChart = new dimple.chart(svg, {{ chart_data }});\n      myChart.setMargins("60px", "60px", "40px", "40px");\n\n      myChart.addCategoryAxis("x", "{{ x_axis_key }}");\n      myChart.addMeasureAxis("y", "{{ y_axis_key }}");\n\n      myChart.addSeries("series", dimple.plot.area);\n      myChart.addLegend(20, 20, 1000, 10, "left");\n      //timeout to make sure it picks up the right dimensions\n      setTimeout(function(){ myChart.draw() }, 10);\n    \n      window.onresize = function () {\n        myChart.draw(0, true);\n      };\n    })();\n  </script>\n</div>',
    data: [['Year', 'Maserati', 'Mazda', 'Mercedes', 'Mini', 'Mitsubishi'], ['2009', '0', '2941', '4303', '354', '5814'], ['2010', '5', '2905', '2867', '412', '5284'], ['2011', '4', '2517', '4822', '552', '6127'], ['2012', '2', '2422', '5399', '776', '4151'], [null, null, null, null, null, null]],
    y_axis_key: 'Thousands Sold'
  }, {
    name: 'multi_donut',
    html: '<!-- MULTI_DONUT -->\n<div id="{{ chart_id }}">\n  <script src="http://d3js.org/d3.v3.min.js"></script>\n  <script src="http://dimplejs.org/dist/dimple.v1.1.2.min.js"></script>\n  <form>\n    <label><input type="radio" name="dataset" value="apples" checked> Apples</label>\n    <label><input type="radio" name="dataset" value="oranges"> Oranges</label>\n  </form>\n  <script>\n    (function(){\n      var color = d3.scale.category20c(); \n      var h = (350);\n      var padding = 50;\n      var w = h + padding * 2;\n      var radius = (h / 2);\n      var outerRadius = radius - padding;\n      var innerRadius = outerRadius / 2\n\n      var dataset = {{ chart_data }};\n\n      var nested = d3.nest()\n        .key(function(d) { return d["{{ x_axis_key }}"]; })\n        .entries(dataset);\n\n      console.log(nested[0].values)\n\n      var arc = d3.svg.arc()\n        .innerRadius(innerRadius) \n        .outerRadius(outerRadius);\n        \n      var pie = d3.layout.pie()\n        .value(function(d) { \n          console.log(\'pie d\', d);\n          return d["{{ y_axis_key }}"] \n        })\n        .sort( null );;\n\n\n      // create svg for donut\n      var svg = d3.select("#{{ chart_id }}")  \n        .append("svg")\n        .attr("width", w)\n        .attr("height", h);\n\n      var group = svg.append(\'g\')\n        .attr("transform", "translate(" + (radius + padding) + "," + radius + ")");\n\n      // Create arc groups\n      var arcs = group.selectAll(".arc") \n        .data(pie(nested[0].values)) \n        .enter()\n        .append("g")\n        .attr("class", "arc");\n        // .each(function(d) { this._current = d; });\n\n      // Draw arc paths\n      var paths = arcs.append("path")\n        .attr("d", arc)\n        .attr("fill", function(d, i) { return color(i); })\n\n\n      // Switch and transition x-axis value\n      d3.selectAll("input")\n        .on("change", change);\n\n      function change() {\n        console.log(this)\n        // var value = this.value;\n        pie.value(function(d) { d["{{ y_axis_key }}"]; }); // change the value function\n        arcs = arcs.data(pie)\n        // .enter()\n        \n        paths.attr("d", arc)\n        // arcs.transition().duration(750).attrTween("d", arcTween); // redraw the arcs\n      }\n\n\n      // function change() {\n      //     // var jobs_counts = getRandomCounts();\n      //     // var jobs_colors = ["green", "yellow", "red", "blue", "cyan"];    \n      //     arcs = arcs.data(pie(nested[1].values))\n      //       .attr("fill", function(d, i) { return color(i); })\n\n      //     arcs.transition().duration(500).attrTween("d", function(a) {\n      //       console.log(\'transition this\', this)\n      //       var i = d3.interpolate(this._current, a);\n      //     this._current = i(0);\n      //     return function(t) {\n      //       return arc\n      //         .innerRadius(innerRadius) \n      //         .outerRadius(outerRadius);\n      //      };\n      //     });                                            \n      // }\n\n\n      // Make group to hold labels\n      var labels = arcs.append("g")\n        .attr("transform", function(d) {\n          var c = arc.centroid(d);\n          return "translate(" + c[0]*1.8 +"," + c[1]*1.6 + ")";\n        })\n\n      labels.append("text") // First line\n        .text(function(d) { return d.data.series; })\n        .attr("text-anchor", "middle")\n\n      labels.append("text") // Second line\n        .text(function(d) { return d.data["{{ y_axis_key }}"]; })\n        .attr("dy", "1em")\n        .attr("text-anchor", "middle")\n\n      // Store the displayed angles in _current.\n      // Then, interpolate from _current to the new angles.\n      // During the transition, _current is updated in-place by d3.interpolate.\n      function arcTween(a) {\n        console.log(\'arctween this, a\', this, a)\n        var i = d3.interpolate(this._current, a);\n        this._current = i(0);\n        return function (t) {\n          return arc(i(t));\n        };\n      }\n\n    })();\n  </script>\n</div>',
    data: [['Year', 'Maserati', 'Mazda', 'Mercedes', 'Mini', 'Mitsubishi'], ['2009', '0', '2941', '4303', '354', '5814'], ['2010', '5', '2905', '2867', '412', '5284'], ['2011', '4', '2517', '4822', '552', '6127'], ['2012', '2', '2422', '5399', '776', '4151'], [null, null, null, null, null, null]],
    y_axis_key: 'Thousands Sold'
  }
];
